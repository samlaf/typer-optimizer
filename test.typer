%%% test.typer --- Un petit programme d'exemple

%% Définition de la fonction `max`.
%% Typer n'a pas (encore) de `if`.
max : Int -> Int -> Int;
max a b = case Int_< a b
  | true => b
  | false => a;

%% Définition du type `Tree a b`.  La déclaration du type de `Tree`
%% est nécessaire pour permettre la définition récursive du type.
%% Et oui, les types ont aussi un type.
Tree : Type -> Type -> Type;
type Tree (a : Type) (b : Type)
  | leaf
  | node (key : a) (value : b) (left : Tree a b) (right : Tree a b);

%% Profondeur d'un arbre.
tree_depth : (a : Type) ≡> (b : Type) ≡> Tree a b -> Int;
tree_depth = lambda a b ≡> lambda t -> case t
  | leaf => 0
  | node _ _ l r
    => let ld = tree_depth l;
           lr = tree_depth r
       in max ld lr;

%% Construction d'un arbre ordonné par des entiers.
tree_insert : (b : Type) ≡> Tree Int b -> Int -> b -> Tree Int b;
tree_insert = lambda b ≡> lambda t k v -> case t
  | leaf => node k v leaf leaf
  | node k1 v1 l r
    => (case Int_< k1 k
        | true => node k1 v1 (tree_insert l k v) r
        | false => (case Int_< k k1
                    | true => node k1 v1 l (tree_insert r k v)
                    | false => node k v l r));

%% Exemple de code pour tester la performance.

make_list : Int -> List Int;
make_list n = case Int_<= n 0
  | true => nil
  | false => let tail = make_list (n - 1);
                 l = List_length tail
             in cons (n + l) tail;

%% %% Code qui exécute le test, mesure le temps et l'imprime.

%% testcmd : IO Unit;
%% testcmd =
%%   %% Eh non, Typer n'a pas encore de syntaxe pratique pour écrire du code
%%   %% monadique.  Donc si vous trouver ça très laid, c'est normal.
%%   IO_bind
%%       (Sys_cpu_time ())
%%       (lambda t_start ->
%%        let x = List_length (make_list 1000)
%%        in IO_bind
%%               (Sys_cpu_time ())
%%               (lambda t_end ->
%%                let t = Float_- t_end t_start;
%%                    stdout = File_stdout ()
%%                in IO_bind (File_write stdout (Float_to_string t))
%%                           (lambda _ -> File_write stdout "\n")));

%% test : Unit;
%% test = IO_run testcmd ();


%%% Constant Folding

%% (+ n m) -> n+m
foo : Int -> Int;
foo a = let c = _+_ 3 4
	in c;

foo1 : Int -> Int;
foo1 x = let c = 3 + 4 + 5 + 6
	 in c;

%% (+ x 0) -> x
foo2 : Int -> Int;
foo2 x = let c = _+_ x 0
	 in c;

foo3 : Int -> Int;
foo3 x = case Int_< 2 1
  | true => 0
  | false => x;

%%% Constant Propagation

%% x = 3; x -> 3
foo : Int -> Int;
foo a = let c = 3
	in let d = 4 + c + 2
	in d + c;


%%% Mesure de Performance
timeopt : Int -> Int;
timeopt x = let a = 10000
	    in let a = a * a
	       in let a = a * a
		  in let a = a * a
		     in a;


%% Code qui exécute le test, mesure le temps et l'imprime.

testcmd : IO Unit;
testcmd =
  %% Eh non, Typer n'a pas encore de syntaxe pratique pour écrire du code
  %% monadique.  Donc si vous trouver ça très laid, c'est normal.
  IO_bind
      (Sys_cpu_time ())
      (lambda t_start ->
       let x = timeopt 0
       in IO_bind
              (Sys_cpu_time ())
              (lambda t_end ->
               let t = Float_- t_end t_start;
                   stdout = File_stdout ()
               in IO_bind (File_write stdout (Float_to_string t))
                          (lambda _ -> File_write stdout "\n")));

%devrait y avoir une difference de runtime de x2 entre version
%optimisee et non
test : Unit;
test = IO_run testcmd ();
